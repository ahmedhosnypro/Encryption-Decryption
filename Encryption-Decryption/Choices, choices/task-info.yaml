type: edu
custom_name: stage6
files:
- name: src/encryptdecrypt/Main.java
  visible: true
  text: |
    package encryptdecrypt;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/EncryptDecryptTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.common.FileUtils;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.IOException;
    import java.nio.charset.StandardCharsets;
    import java.nio.file.Files;
    import java.nio.file.NoSuchFileException;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.util.List;

    public class EncryptDecryptTest extends StageTest<String> {

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .addArguments(
                        "-alg", "unicode",
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "in.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("\\jqhtrj%yt%m~ujwxpnqq&")
                    .addFile("in.txt", "Welcome to hyperskill!"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "0",
                        "-mode", "enc",
                        "-alg", "unicode",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hello")
                    .addFile("input.txt", "Hello"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "1",
                        "-in", "i.txt",
                        "-alg", "unicode",
                        "-out", "output.txt",
                        "-mode", "enc"
                    )
                    .setAttach("123456789")
                    .addFile("i.txt", "012345678"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-in", "input.txt",
                        "-out", "output.txt",
                        "-alg", "unicode",
                        "-key", "5"
                    )
                    .setAttach("Welcome to hyperskill!")
                    .addFile("input.txt", "\\jqhtrj%yt%m~ujwxpnqq&"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-alg", "unicode",
                        "-key", "0",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hi")
                    .addFile("input.txt", "Hi"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "1",
                        "-in", "input.txt",
                        "-alg", "unicode",
                        "-out", "output.txt"
                    )
                    .setAttach("111122223333")
                    .addFile("input.txt", "222233334444"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("bjqhtrj yt mdujwxpnqq")
                    .addFile("input.txt", "welcome to hyperskill"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("treasure")
                    .addFile("input.txt", "dbokcebo"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "12",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("cphpchdjcijdjibhdjebhjucspucmdmudbnuccup")
                    .addFile("input.txt", "qdvdqvrxqwxrxwpvrxspvxiqgdiqarairpbiqqid"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("y")
                    .addFile("input.txt", "i"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("i")
                    .addFile("input.txt", "y")
            );
        }

        @Override
        public CheckResult check(String reply, String clue) {
            String fileName = "output.txt";
            String output;

            try {
                Path path = Paths.get(FileUtils.CURRENT_DIR + fileName);
                output = Files.readString(path, StandardCharsets.UTF_8);
            } catch (NoSuchFileException e) {
                return new CheckResult(false, "File output.txt not found!");
            } catch (IOException e) {
                return new CheckResult(false, "Cannot read from file!");
            }

            if (!output.trim().equals(clue.trim())) {
                return new CheckResult(false, "Wrong result in the file!");
            }

            return new CheckResult(true);
        }

    }
  learner_created: false
- name: src/encryptdecrypt/Encrypt.java
  visible: true
  text: |+
    package encryptdecrypt;

    import java.util.Scanner;

    public class Encrypt {
        static Scanner scanner;

        static {
            scanner = new Scanner(System.in);
        }

        static String allKeyEncrypt(String message, int key) {
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < message.length(); i++) {
                char c = message.charAt(i);
                char newChar = (char) (c + key);
                sb.append(newChar);
            }
            return sb.toString();
        }

        static String simpleEncrypt() {
            String s = "we found a treasure!";
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < s.length(); i++) {
                char c = s.charAt(i);
                char newChar = c;
                if (c >= 65 && c <= 90) {
                    int n = 90 - c;
                    if (n < 13) {
                        newChar = (char) (90 + n);
                    } else newChar = (char) (65 - (25 - n));
                } else if (c >= 97 && c <= 122) {
                    int n = 122 - c;
                    if (n < 13) {
                        newChar = (char) (97 + n);
                    } else newChar = (char) (122 - (25 - n));
                }
                sb.append(newChar);
            }
            return sb.toString();
        }

        static String letterKeyEncrypt(String message, int key) {
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < message.length(); i++) {
                char c = message.charAt(i);
                char newChar = c;
                if (c >= 65 && c <= 90) {
                    if (c + key < 90) {
                        newChar = (char) (c + key);
                    } else {
                        key -= (90 - c);
                        newChar = (char) (64 + key);
                    }
                } else if (c >= 97 && c <= 122) {
                    if (c + key < 122) {
                        newChar = (char) (c + key);
                    } else {
                        int tmpKey = key - (122 - c);
                        newChar = (char) (96 + tmpKey);
                    }
                }
                sb.append(newChar);
            }
            return sb.toString();
        }
    }

  learner_created: true
- name: src/encryptdecrypt/Decrypt.java
  visible: true
  text: |
    package encryptdecrypt;

    public class Decrypt {
        static String allKeyDecrypt(String cyphertext, int key){
            StringBuilder sb = new StringBuilder();
            for (int i=0; i<cyphertext.length(); i++){
                char c = cyphertext.charAt(i);
                char newChar = (char) (c - key);
                sb.append(newChar);
            }
            return sb.toString();
        }
    }
  learner_created: true
- name: src/encryptdecrypt/in.txt
  visible: true
  text: Welcome to hyperskill!
  learner_created: true
- name: src/encryptdecrypt/Operation.java
  visible: true
  text: |
    package encryptdecrypt;

    public enum Operation {
        ENC,
        DEC;
    }
  learner_created: true
- name: src/encryptdecrypt/Start.java
  visible: true
  text: |
    package encryptdecrypt;

    import java.util.Scanner;

    import static encryptdecrypt.Decrypt.*;
    import static encryptdecrypt.Encrypt.*;

    public class Start {
        static String start(String opt, String keyS, String input) {
            String ret = "";
            try {
                Operation operation = Operation.valueOf(opt.toUpperCase());
                int key = 0;
                try {
                    key = Integer.parseInt(keyS);
                } catch (IllegalArgumentException e) {
                    ret = "enter a number";
                }
                switch (operation) {
                    case ENC:
                        ret = allKeyEncrypt(input, key);
                        break;
                    case DEC:
                        ret = allKeyDecrypt(input, key);
                        break;
                    default:
                        break;
                }

            } catch (IllegalArgumentException e) {
                ret = "enter a valid operation";
            }

            return ret;
        }
        //standard input
        static String start() {
            String ret = "";
            Scanner scanner = new Scanner(System.in);

            String opt = scanner.nextLine().trim().toUpperCase();


            try {
                Operation operation = Operation.valueOf(opt);
                String input = scanner.nextLine().trim();
                String keyS = scanner.nextLine().trim();
                int key = 0;
                try {
                    key = Integer.parseInt(keyS);
                } catch (IllegalArgumentException e) {
                    System.out.println("enter a number");
                }
                switch (operation) {
                    case ENC:
                        ret = allKeyEncrypt(input, key);
                        break;
                    case DEC:
                        ret = allKeyDecrypt(input, key);
                        break;
                    default:
                        break;
                }

            } catch (IllegalArgumentException e) {
                ret = "enter a valid operation";
            }
            return ret;
        }
    }
  learner_created: true
- name: src/encryptdecrypt/out.txt
  visible: true
  text: \jqhtrj%yt%m~ujwxpnqq&
  learner_created: true
- name: src/encryptdecrypt/InputProcessor.java
  visible: true
  learner_created: true
- name: output.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/46/stages/250/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Wed, 30 Jun 2021 09:27:30 UTC
record: -1
